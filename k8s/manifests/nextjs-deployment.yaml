# Next.js deployment â€“ starts after Postgres is ready and exposes port 3000
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nextjs-deployment
  namespace: ecommerce
  labels:
    app: nextjs
spec:
  replicas: 2
  selector:
    matchLabels:
      app: nextjs
  template:
    metadata:
      labels:
        app: nextjs
    spec:
      # Ensure DB is ready before the app starts to prevent crashloop
      initContainers:
        - name: wait-for-db
          image: postgres:15-alpine
          env:
            - name: POSTGRES_DB
              valueFrom:
                configMapKeyRef:
                  name: ecommerce-config
                  key: POSTGRES_DB
            - name: POSTGRES_USER
              valueFrom:
                configMapKeyRef:
                  name: ecommerce-config
                  key: POSTGRES_USER
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: ecommerce-secrets
                  key: POSTGRES_PASSWORD
          command:
            - sh
            - -c
            - |
              echo "Waiting for PostgreSQL to be ready..."
              until pg_isready -h postgres-service -U $POSTGRES_USER -d $POSTGRES_DB; do
                echo "PostgreSQL is unavailable - sleeping"
                sleep 2
              done
              echo "PostgreSQL is ready!"
      containers:
        - name: nextjs
          image: danors/ecommerce-dashboard:latest
          ports:
            - containerPort: 3000
          env:
            - name: NODE_ENV
              valueFrom:
                configMapKeyRef:
                  name: ecommerce-config
                  key: NODE_ENV
            - name: PORT
              valueFrom:
                configMapKeyRef:
                  name: ecommerce-config
                  key: PORT
            - name: POSTGRES_DB
              valueFrom:
                configMapKeyRef:
                  name: ecommerce-config
                  key: POSTGRES_DB
            - name: POSTGRES_USER
              valueFrom:
                configMapKeyRef:
                  name: ecommerce-config
                  key: POSTGRES_USER
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: ecommerce-secrets
                  key: POSTGRES_PASSWORD
            - name: DB_HOST
              valueFrom:
                configMapKeyRef:
                  name: ecommerce-config
                  key: DB_HOST
            - name: DB_PORT
              valueFrom:
                configMapKeyRef:
                  name: ecommerce-config
                  key: DB_PORT
            - name: DATABASE_URL
              value: "postgresql://$(POSTGRES_USER):$(POSTGRES_PASSWORD)@$(DB_HOST):$(DB_PORT)/$(POSTGRES_DB)?sslmode=disable"
          livenessProbe:
            httpGet:
              path: /api/health
              port: 3000
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /api/health
              port: 3000
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3
          resources:
            requests:
              memory: "256Mi"
              cpu: "250m"
            limits:
              memory: "512Mi"
              cpu: "500m"
---
apiVersion: v1
kind: Service
metadata:
  name: nextjs-service
  namespace: ecommerce
  labels:
    app: nextjs
spec:
  selector:
    app: nextjs
  ports:
    - port: 3000
      targetPort: 3000
      protocol: TCP
  type: ClusterIP
